API Documentation for /encode_image

Endpoint: /encode_image

Method: POST

Request Body:

    image_path: The path to the image file to be used for steganography (required)
    secret: The secret message to be encoded in the image (required)
    save_dir: The directory where the resulting images will be saved (optional)

Response:

    message: A success message indicating that the steganography operation was successful

Example Request:

json

{

  "image_path": "path/to/image.jpg",

  "secret": "Stega!!",

  "save_dir": "path/to/save/directory"

}

Example Response:

json

{

  "message": "Sleuth successful"

}

Error Handling:

    If the image_path or secret fields are missing, a 400 Bad Request response will be returned with an error message indicating the missing field.
    If the save_dir field is specified but the directory does not exist, a 400 Bad Request response will be returned with an error message indicating the invalid directory.
    If an error occurs during the steganography operation, a 500 Internal Server Error response will be returned with an error message indicating the error.

Steganography Algorithm:

The steganography algorithm used in this API is based on the BCH error-correcting code and uses a TensorFlow model to encode the secret message in the image. The algorithm takes the following steps:

    Load the image file and convert it to a NumPy array.
    Encode the secret message using the BCH error-correcting code.
    Create a TensorFlow model and load the pre-trained weights.
    Use the TensorFlow model to encode the secret message in the image.
    Save the resulting images to the specified directory.

TensorFlow Model:

The TensorFlow model used in this API is a pre-trained model that takes an image and a secret message as input and outputs the steganographed image. The model is loaded using the tf.saved_model.loader module and is used to encode the secret message in the image.

BCH Error-Correcting Code:

The BCH error-correcting code is used to encode the secret message in a way that allows it to be recovered from the steganographed image. The code takes the secret message as input and outputs a binary string that is used to encode the message in the image.

Image Processing:

The image processing steps involved in this API include:

    Loading the image file and converting it to a NumPy array.
    Resizing the image to a fixed size (400x400).
    Normalizing the image pixel values to be between 0 and 1.
    Encoding the secret message in the image using the TensorFlow model.
    Saving the resulting images to the specified directory.

