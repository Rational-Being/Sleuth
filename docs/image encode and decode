### Overview

This API allows users to encode a secret message into an image using steganography techniques. The image encoding is performed using the Least Significant Bit (LSB) method. The API is built using Flask and the Pillow library for image processing.

### Base URL

```
http://127.0.0.1:5000
```

### Endpoints

#### Encode Image

- **URL:** `/encode_image`
- **Method:** `POST`
- **Description:** Encodes a message into an image file with encryption.
- **Authentication:** HTTP Basic Authentication

##### Request

- **Headers:**
  - `Authorization: Basic <base64-encoded-credentials>`
  - `Content-Type: multipart/form-data`
- **Parameters:**
  - `file`: (required) The image file to encode the message into.
  - `message`: (required) The message to encode.
  - `password`: (required) The password to encrypt the message.

##### Example Request

Using `curl`:

```sh
curl -u username:password -X POST -F "file=@path_to_your_image.png" -F "message=Your secret message" -F "password=Strong_Pasaaword" http://127.0.0.1:5000/encode_image --output encoded_image.png
```

#### Decode Image

- **URL:** `/decode_image`
- **Method:** `POST`
- **Description:** Decodes and decrypts a message from an image file.
- **Authentication:** HTTP Basic Authentication

##### Request

- **Headers:**
  - `Authorization: Basic <base64-encoded-credentials>`
  - `Content-Type: multipart/form-data`
- **Parameters:**
  - `file`: (required) The image file to decode the message from.
  - `password`: (required) The password to decrypt the message.

##### Example Request

Using `curl`:

```sh
curl -u username:password -X POST -F "file=@encoded_image.png" -F "password=Strong_Pasaaword" http://127.0.0.1:5000/decode_image
```

##### Response

- **Success (200 OK):**
  - **Description:** The encoded image file.
  - **Content-Type:** `image/png`, `image/jpeg`, etc. (depends on the input image format)
  - The response contains the encoded image as a downloadable file.

- **Error (400 Bad Request):**
  - **Description:** Returned when the request is missing required parameters or contains invalid data.
  - **Content-Type:** `application/json`
  - **Body:**
    ```json
    {
      "error": "Error message describing the issue"
    }
    ```

- **Error (500 Internal Server Error):**
  - **Description:** Returned when there is an internal server error during the encoding process.
  - **Content-Type:** `application/json`
  - **Body:**
    ```json
    {
      "error": "Error message describing the issue"
    }
    ```

##### Example Response

- **Success:**
  - The response contains the encoded image as a file download.

- **Error:**
  ```json
  {
    "error": "No file part"
  }
  ```

  ```json
  {
    "error": "No selected file"
  }
  ```

  ```json
  {
    "error": "No message provided"
  }
  ```

  ```json
  {
    "error": "Detailed error message for internal server error"
  }
  ```




Decode Image

    URL: /decode_image
    Method: POST
    Description: Decodes a secret message from an image.

Request

    Headers:
        Content-Type: multipart/form-data
    Parameters:
        file: (required) The image file from which to decode the message. Must be provided as a form-data file upload.

Example Request

Using curl:

sh

curl -X POST -F "file=@path_to_encoded_image.png" http://127.0.0.1:5000/decode

Using Postman:

    Select POST method.
    Enter http://127.0.0.1:5000/decode in the URL field.
    In the Body tab, select form-data.
    Add a key file, set type to File, and choose the encoded image file.
    Click Send.

Response

    Success (200 OK):
        Description: The decoded message.
        Content-Type: application/json
        Body:

        json

    {
      "message": "Your decoded secret message"
    }

Error (400 Bad Request):

    Description: Returned when the request is missing the required file parameter or contains an invalid file.
    Content-Type: application/json
    Body:

    json

    {
      "error": "Error message describing the issue"
    }

Error (500 Internal Server Error):

    Description: Returned when there is an internal server error during the decoding process.
    Content-Type: application/json
    Body:

    json

        {
          "error": "Error message describing the issue"
        }

Example Response

    Success:

    json

{
  "message": "Your decoded secret message"
}

Error:

json

{
  "error": "No file part"
}

json

{
  "error": "No selected file"
}

json

    {
      "error": "Detailed error message for internal server error"
    }

