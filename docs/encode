### Overview

This API allows users to encode a secret message into an image using steganography techniques. The image encoding is performed using the Least Significant Bit (LSB) method. The API is built using Flask and the Pillow library for image processing.

### Base URL

```
http://127.0.0.1:5000
```

### Endpoints

#### Encode Image

- **URL:** `/encode`
- **Method:** `POST`
- **Description:** Encodes a secret message into an image and returns the modified image.

##### Request

- **Headers:**
  - `Content-Type: multipart/form-data`
- **Parameters:**
  - `file`: (required) The image file to encode the message into. Must be provided as a form-data file upload.
  - `message`: (required) The secret message to encode into the image. Must be provided as a form-data text field.

##### Example Request

Using `curl`:

```sh
curl -X POST -F "file=@path_to_your_image.png" -F "message=Your secret message" http://127.0.0.1:5000/encode --output encoded_image.png
```

Using Postman:

1. Select `POST` method.
2. Enter `http://127.0.0.1:5000/encode` in the URL field.
3. In the `Body` tab, select `form-data`.
4. Add a key `file`, set type to `File`, and choose the image file.
5. Add another key `message`, set type to `Text`, and enter the secret message.
6. Click `Send`.
7. Save the response as a file named `encoded_image.png`.

##### Response

- **Success (200 OK):**
  - **Description:** The encoded image file.
  - **Content-Type:** `image/png`, `image/jpeg`, etc. (depends on the input image format)
  - The response contains the encoded image as a downloadable file.

- **Error (400 Bad Request):**
  - **Description:** Returned when the request is missing required parameters or contains invalid data.
  - **Content-Type:** `application/json`
  - **Body:**
    ```json
    {
      "error": "Error message describing the issue"
    }
    ```

- **Error (500 Internal Server Error):**
  - **Description:** Returned when there is an internal server error during the encoding process.
  - **Content-Type:** `application/json`
  - **Body:**
    ```json
    {
      "error": "Error message describing the issue"
    }
    ```

##### Example Response

- **Success:**
  - The response contains the encoded image as a file download.

- **Error:**
  ```json
  {
    "error": "No file part"
  }
  ```

  ```json
  {
    "error": "No selected file"
  }
  ```

  ```json
  {
    "error": "No message provided"
  }
  ```

  ```json
  {
    "error": "Detailed error message for internal server error"
  }
  ```
